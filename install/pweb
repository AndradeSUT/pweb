#!/bin/bash
[[ $(awk -F" " '{print $2}' /usr/lib/telegram) == "@nandoslayer" ]] && {
### CORES DA BARRA
msg() {
  BRAN='\033[1;37m' && VERMELHO='\e[31m' && VERDE='\e[32m' && AMARELO='\e[33m'
  AZUL='\e[34m' && MAGENTA='\e[35m' && MAG='\033[1;36m' && NEGRITO='\e[1m' && SEMCOR='\e[0m'
  case $1 in
  -ne) cor="${VERMELHO}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}" ;;
  -ama) cor="${AMARELO}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -verm) cor="${AMARELO}${NEGRITO}[!] ${VERMELHO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -azu) cor="${MAG}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -verd) cor="${VERDE}${NEGRITO}" && echo -e "${cor}${2}${SEMCOR}" ;;
  -bra) cor="${VERMELHO}" && echo -ne "${cor}${2}${SEMCOR}" ;;
  -nazu) cor="${COLOR[6]}${NEGRITO}" && echo -ne "${cor}${2}${SEMCOR}" ;;
  -gri) cor="\e[5m\033[1;100m" && echo -ne "${cor}${2}${SEMCOR}" ;;
  "-bar2" | "-bar") cor="${VERMELHO}————————————————————————————————————————————————————" && echo -e "${SEMCOR}${cor}${SEMCOR}" ;;
  esac
}
fun_bar () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
${comando[0]} -y > /dev/null 2>&1
${comando[1]} -y > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m"
tput cnorm
}
fun_prog ()
{
    comando[0]="$1" 
    ${comando[0]}  > /dev/null 2>&1 & 
    tput civis
    echo -ne "\033[1;32m.\033[1;33m.\033[1;31m. \033[1;32m"
    while [ -d /proc/$! ]
    do
        for i in / - \\ \|
        do
            sleep .1
            echo -ne "\e[1D$i"
        done
    done
    tput cnorm
    echo -e "\e[1DOK"
}
print_center() {
  if [[ -z $2 ]]; then
    text="$1"
  else
    col="$1"
    text="$2"
  fi

  while read line; do
    unset space
    x=$(((54 - ${#line}) / 2))
    for ((i = 0; i < $x; i++)); do
      space+=' '
    done
    space+="$line"
    if [[ -z $2 ]]; then
      msg -azu "$space"
    else
      msg "$col" "$space"
    fi
  done <<<$(echo -e "$text")
}
time_reboot() {
    echo ""
  print_center -ama "REINICIANDO EM "
  echo ""
  REBOOT_TIMEOUT="$1"

  while [ $REBOOT_TIMEOUT -gt 0 ]; do
    print_center -ne "-$REBOOT_TIMEOUT-\r"
    sleep 1
    : $((REBOOT_TIMEOUT--))
  done
  reboot
}
if [[ "$(grep -c "Ubuntu" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f2 /etc/issue.net |awk -F "." '{print $1}')
elif [[ "$(grep -c "Debian" /etc/issue.net)" = "1" ]]; then
system=$(cut -d' ' -f1 /etc/issue.net)
system+=$(echo ' ')
system+=$(cut -d' ' -f3 /etc/issue.net)
else
system=$(cut -d' ' -f1 /etc/issue.net)
fi
_ons=$(ps -x | grep sshd | grep -v root | grep priv | wc -l)
_ram=$(printf ' %-9s' "$(free -h | grep -i mem | awk {'print $2'})")
_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
_usop=$(printf '%-5s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
_core=$(printf '%-5s' "$(grep -c cpu[0-9] /proc/stat)")
_system=$(printf '%-14s' "$system")
_hora=$(printf '%(%H:%M:%S)T')
autm=$(grep "pweb;" /etc/profile > /dev/null && echo -e "\033[1;32m ON ◉" || echo -e "\033[1;31mOFF ○")
botp=$(ps x | grep "bot_painel"|grep -v grep > /dev/null && echo -e "\033[1;32m ON ◉" || echo -e "\033[1;31mOFF ○")
firew=$(ps x | grep "firewalld"|grep -v grep > /dev/null && echo -e "\033[1;32m ON ◉" || echo -e "\033[1;31mOFF ○")
fun_update () {
    apt-get update -y > /dev/null 2>&1
}

fun_upgrade () {
    apt-get upgrade -y > /dev/null 2>&1
}
fun_atpweb () {
[[ ! -d /bin/ppweb ]] && mkdir /bin/ppweb
cd /bin/ppweb || exit
rm *.sh ver* > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/ubuinst.sh > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/restbanco.sh > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/empresa.sh > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/updatepainel.sh > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/updatepainelarm.sh > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/botpweb.sh > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/verifatt.sh > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/verpweb > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/verweb > /dev/null 2>&1
cd /bin || exit
rm pweb > /dev/null 2>&1
wget https://github.com/nandoslayer/pweb/raw/painel/install/pweb > /dev/null 2>&1
chmod 777 pweb > /dev/null 2>&1
cd || exit 
clear
cat /dev/null > ~/.bash_history && history -c
pweb
}
autoexec () {
   if grep "pweb;" /etc/profile > /dev/null; then
      echo ""
      echo -e "\033[1;32mDESATIVANDO AUTO EXECUÇÃO DO PWEB\033[0m"
      offautpweb () {
         sed -i '/pweb;/d' /etc/profile
      }
      echo ""
      fun_bar 'offautpweb'
      echo ""
      echo -e "\033[1;31mAUTO EXECUÇÃO DESATIVADO!\033[0m"
      sleep 1.5s
      pweb
   else
      echo ""
      echo -e "\033[1;32mATIVANDO AUTO EXECUÇÃO DO PWEB\033[0m"
      autpweb () {
         grep -v "^pweb;" /etc/profile > /tmp/tmpass && mv /tmp/tmpass /etc/profile
         echo "pweb;" >> /etc/profile
      }
      echo ""
      fun_bar 'autpweb'
      echo ""
      echo -e "\033[1;32mAUTO EXECUÇÃO ATIVADO!\033[0m"
      sleep 1.5s
      pweb
   fi

}
velocity () {
aguarde () {
comando[0]="$1"
comando[1]="$2"
 (
[[ -e $HOME/fim ]] && rm $HOME/fim
[[ ! -d /etc/SSHPlus ]] && rm -rf /bin/menu
${comando[0]} > /dev/null 2>&1
${comando[1]} > /dev/null 2>&1
touch $HOME/fim
 ) > /dev/null 2>&1 &
 tput civis
echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
while true; do
   for((i=0; i<18; i++)); do
   echo -ne "\033[1;31m#"
   sleep 0.1s
   done
   [[ -e $HOME/fim ]] && rm $HOME/fim && break
   echo -e "\033[1;33m]"
   sleep 1s
   tput cuu1
   tput dl1
   echo -ne "\033[1;33mAGUARDE \033[1;37m- \033[1;33m["
done
echo -e "\033[1;33m]\033[1;37m -\033[1;32m OK !\033[1;37m "
tput cnorm
}
fun_tst () {
    if [ -e "/usr/bin/testevelocidade" ]; then
    testevelocidade --share > speed
    else
    wget https://github.com/nandoslayer/pweb/raw/painel/install/speedtest-cli -O testevelocidade
    chmod +x testevelocidade
    mv testevelocidade /usr/bin/testevelocidade
    testevelocidade --share > speed
    fi
}
echo -e "PAINELWEB GESTOR-SSH" | figlet
echo -e "                              \033[1;31mBy: \033[1;32m@nandoslayer\033[1;36m"
echo ""
echo -e "\033[1;37m◆═════════════════════════════════════════════════════════════◆\033[0m"
echo -e " \E[44;1;37m              🚀 TESTE DE VELOCIDADE DA VPS 🚀               \E[0m"
echo -e "\033[1;37m◆═════════════════════════════════════════════════════════════◆\033[0m"
echo ""
aguarde 'fun_tst'
echo ""
png=$(cat speed | sed -n '5 p' |awk -F : {'print $NF'})
down=$(cat speed | sed -n '7 p' |awk -F :  {'print $NF'})
upl=$(cat speed | sed -n '9 p' |awk -F :  {'print $NF'})
host=$(cat speed | sed -n '2 p' |awk -F :  {'print $NF'})
echo -e "\033[1;37m═══════════════════════════════════════════════════════════════\033[0m"
echo -e "\033[1;32mHOST SERVER:\033[1;37m$host"
echo ""
echo -e "\033[1;32mPING (LATÊNCIA):\033[1;37m$png"
echo ""
echo -e "\033[1;32mDOWNLOAD:\033[1;37m$down"
echo ""
echo -e "\033[1;32mUPLOAD:\033[1;37m$upl"
echo ""
echo -e "\033[1;37m═══════════════════════════════════════════════════════════════\033[0m"
rm -rf $HOME/speed
}
fun_limpiarepositorios () {
##LIMPA ROOT
rm -rf /root/*.sh* > /dev/null 2>&1
##LIMPA HTML
rm -rf /var/www/html
[[ ! -d /var ]] && mkdir /var
[[ ! -d /var/www ]] && mkdir /var/www
[[ ! -d /var/www/html ]] && mkdir /var/www/html
}
painel_att () {
echo -e "PAINELWEB GESTOR-SSH" | figlet
echo -e "                              \033[1;31mBy: \033[1;32m@nandoslayer\033[1;36m"
echo ""
echo -e "\033[1;36mSELECIONE O MODO COMPATÍVEL CONFORME SUA VPS SSH: \033[1;37m"
echo ""
echo -e "[1] - VPS SSH PADRÃO X86_64"
echo ""
echo -e "[2] - VPS SSH AMPERE/ARM/ARCH64"
echo ""
echo -ne "\033[1;36mSelecione uma pção: \033[1;37m"
read resposta
if [[ "$resposta" = '1' ]]; then
    /bin/ppweb/updatepainel.sh
elif [[ "$resposta" = '2' ]]; then
/bin/ppweb/updatepainelarm.sh
    else
 echo ""
    echo -e "\033[1;31mOpção inválida !\033[0m"
    sleep 1
    pweb
fi
}
painel_rest () {
/bin/ppweb/restbanco.sh
}
painel_empresa () {
/bin/ppweb/empresa.sh
}
#BOT TELEGRAM
bot_telegram () {
/bin/ppweb/botpweb.sh
}
#SENHA ROOT
senha_root () {
 clear
echo -e "PAINELWEB GESTOR-SSH" | figlet
echo -e "                              \033[1;31mBy: \033[1;32m@nandoslayer\033[1;36m"
echo ""
echo -e "\E[44;1;65m    ALTERANDO SENHA ROOT     \E[0m"
echo ""
read -p "DIGITE UMA NOVA SENHA ROOT: " pwdroot
echo "root:$pwdroot" | chpasswd
echo -e "\033[1;33m • \033[1;32mSENHA ROOT ALTERADA COM SUCESSO\033[1;33m • \033[0m"
sleep 3s
clear
echo -e "\033[1;33m • \033[1;32mSISTEMA REINICIANDO\033[1;33m • \033[0m"
echo ""
sleep 4s
shutdown -r now > /dev/null
}
##PAINEL REMOVE
remove_painel () {
clear
echo -e "\033[1;32m SEMPRE CONFIRME COM \033[1;37mY"
echo -e "\033[1;32m PROSSIGA COM \033[1;37mENTER"
sleep 7
service apache2 stop
apt-get purge mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-*
rm -rf /etc/mysql /var/lib/mysql
rm -rf /var/www/html
apt-get autoremove
apt-get autoclean
sed -i "s;Listen 80;Listen 81;g" /etc/apache2/ports.conf
service apache2 restart > /dev/null 2>&1
service apache2 stop
[[ ! -d /var/www ]] && mkdir /var/www
[[ ! -d /var/www/html ]] && mkdir /var/www/html
echo -e "\033[1;36mPAINEL REMOVIDO COM ÊXITO \033[1;32m[!OK]"
pweb
}
oracl() {
    clear
    echo -e "PAINELWEB GESTOR-SSH" | figlet
    echo -e "                              \033[1;31mBy: \033[1;32m@nandoslayer\033[1;36m"
    echo ""
    msg -bar
    msg -azu "		FIREWALL ORACLE/AWS/AZR"
    msg -ama " ESSA OPÇÃO SERVE PARA VPS ORACLE/AWS/AZR E TAMBÉM"
    msg -ama " PARA VPS QUE PRECISE ABRIR PORTAS NO FIREWALL!"
	msg -bar
    echo ""
	if ps x | grep -w firewalld | grep -v grep 1>/dev/null 2>/dev/null; then
        echo -e "\033[1;33mPORTAS ABERTAS\033[1;37m: \033[1;32m$(firewall-cmd --list-ports)"
		else
		echo ""
        sleep 0.1
    fi
	echo ""
echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mABRIR PORTA TCP \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m"
echo -e "\033[1;31m[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mFECHAR PORTA TCP \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m"
echo -e "\033[1;31m[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mABRIR PORTA UDP \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m"
echo -e "\033[1;31m[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mFECHAR PORTA UDP \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m"
echo -e "\033[1;31m[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mDESISTALAR FIREWALL \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m"
echo -e "\033[1;31m[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33mVOLTAR \033[1;32m<\033[1;33m<\033[1;31m<\033[0m \033[0m"
echo ""
echo -ne "\033[1;36mOPÇÃO: \033[1;37m"; read -r x
case "$x" in 
   1 | 01)
   verif_portas_tcp
   exit;
   ;;
   2 | 02)
   oracltcpfechar
   exit;
   ;;
   3 | 03)
   verif_portas_udp
   exit;
   ;;
   4 | 04)
   oracludpfechar
   exit;
   ;;
   5 | 05)
   systemctl stop firewalld &>/dev/null
   systemctl disable firewalld &>/dev/null
   apt remove  firewalld -y &>/dev/null
   apt purge firewalld -y &>/dev/null
   apt-get autoremove -y &>/dev/null
   apt-get autoclean -y &>/dev/null
   rm -rf /etc/firewalld &>/dev/null
   echo -e "\n\033[1;31mDESINSTALADO COM SUCESSO!\033[0m"
   sleep 3
   oracl
   exit;
   ;;
   0 | 00)
   pweb
   exit;
   ;;
   *)
   echo -e "\n\033[1;31mOpção inválida!\033[0m"
   sleep 2
   oracl
esac
}
verif_portas_tcp() {
echo ""
echo -ne "\033[1;34mQUAL PORTA TCP DESEJA ABRIR \033[1;33m?\033[1;37m "
read pt
if (firewall-cmd --zone=public --query-port=$pt/tcp) 1>/dev/null 2>/dev/null; then
echo -e "\n\033[1;31mPorta \033[1;33m$pt \033[1;31mjá esta aberta!\033[0m"
sleep 3
oracl
else
oracltcp
fi
	}
verif_portas_udp() {
echo ""
echo -ne "\033[1;34mQUAL PORTA UDP DESEJA ABRIR \033[1;33m?\033[1;37m "
read pt
if (firewall-cmd --zone=public --query-port=$pt/udp) 1>/dev/null 2>/dev/null; then
echo -e "\n\033[1;31mPorta \033[1;33m$pt \033[1;31mjá esta aberta!\033[0m"
sleep 3
oracl
else
oracludp
fi
	}
oracltcpfechar() {
	if ps x | grep -w firewalld | grep -v grep 1>/dev/null 2>/dev/null; then
	echo ""
        echo -ne "\033[1;34mQUAL PORTA TCP DESEJA FECHAR \033[1;33m?\033[1;37m "
			read pt
			echo ""
				firewall-cmd --zone=public --permanent --remove-port=$pt/tcp &>/dev/null
				echo -e "\n\033[1;32mPorta $pt fechada com sucesso!"
				sleep 2
    firewall-cmd --reload &>/dev/null
	oracl
		else
        apt update -y &>/dev/null
    apt install firewalld -y &>/dev/null
	systemctl enable firewalld &>/dev/null
	systemctl start firewalld &>/dev/null
	firewall-cmd --zone=public --permanent --add-port=22/tcp &>/dev/null
	echo ""
	echo -ne "\033[1;34mQUAL PORTA DESEJA FECHAR \033[1;33m?\033[1;37m "
			read pt
			echo ""
				firewall-cmd --zone=public --permanent --remove-port=$pt/tcp &>/dev/null
				echo -e "\n\033[1;32mPorta $pt fechada com sucesso!"
				sleep 2
    firewall-cmd --reload &>/dev/null
	oracl
    fi
}
oracludpfechar() {
if ps x | grep -w firewalld | grep -v grep 1>/dev/null 2>/dev/null; then
echo ""
        echo -ne "\033[1;34mQUAL PORTA UDP DESEJA FECHAR \033[1;33m?\033[1;37m "
			read pt
			echo ""
				firewall-cmd --zone=public --permanent --remove-port=$pt/udp &>/dev/null
				echo -e "\n\033[1;32mPorta $pt fechada com sucesso!"
				sleep 2
    firewall-cmd --reload &>/dev/null
	oracl
		else
        apt update -y &>/dev/null
    apt install firewalld -y &>/dev/null
	systemctl enable firewalld &>/dev/null
	systemctl start firewalld &>/dev/null
	firewall-cmd --zone=public --permanent --add-port=22/tcp &>/dev/null
	echo ""
	echo -ne "\033[1;34mQUAL PORTA DESEJA FECHAR \033[1;33m?\033[1;37m "
			read pt
			echo ""
				firewall-cmd --zone=public --permanent --remove-port=$pt/udp &>/dev/null
				echo -e "\n\033[1;32mPorta $pt fechada com sucesso!"
				sleep 2
    firewall-cmd --reload &>/dev/null
	oracl
    fi
}
oracltcp() {
	if ps x | grep -w firewalld | grep -v grep 1>/dev/null 2>/dev/null; then
	firewall-cmd --zone=public --permanent --add-port=$pt/tcp &>/dev/null
	echo -e "\n\033[1;32mPorta $pt aberta com sucesso!"
	sleep 3
    firewall-cmd --reload &>/dev/null
	oracl
	else
    apt update -y &>/dev/null
    apt install firewalld -y &>/dev/null
	systemctl enable firewalld &>/dev/null
	systemctl start firewalld &>/dev/null
	firewall-cmd --zone=public --permanent --add-port=22/tcp &>/dev/null
	firewall-cmd --zone=public --permanent --add-port=$pt/tcp &>/dev/null
	echo -e "\n\033[1;32mPorta $pt aberta com sucesso!"
	sleep 3
    firewall-cmd --reload &>/dev/null
	oracl
	fi
}
oracludp() {
    if ps x | grep -w firewalld | grep -v grep 1>/dev/null 2>/dev/null; then
    firewall-cmd --zone=public --permanent --add-port=$pt/udp &>/dev/null
    echo -e "\n\033[1;32mPorta $pt aberta com sucesso!"
	sleep 3
    firewall-cmd --reload &>/dev/null
	oracl
	else
    apt update -y &>/dev/null
    apt install firewalld -y &>/dev/null
	systemctl enable firewalld &>/dev/null
	systemctl start firewalld &>/dev/null
	firewall-cmd --zone=public --permanent --add-port=22/tcp &>/dev/null
	firewall-cmd --zone=public --permanent --add-port=$pt/udp &>/dev/null
	echo -e "\n\033[1;32mPorta $pt aberta com sucesso!"
	sleep 3
    firewall-cmd --reload &>/dev/null
	oracl
    fi
}
att_pweb () {
clear
echo -e "\E[41;1;37m         BAIXANDO ULTIMA VERSÃO        \E[0m"
echo -e " "
echo -ne "\033[1;33m[\033[1;31m ! \033[1;33m] \033[1;31mATUALIZANDO"; fun_prog 'fun_atpweb'
echo -e " "
echo -e " "
echo -ne "\033[1;33m[\033[1;31m ! \033[1;33m] \033[1;31mCONCLUINDO"; fun_prog 'sleep 3'
sleep 1
clear
echo ""
echo -e "        \033[1;33m • \033[1;32mATUALIZAÇÃO CONCLUÍDA COM SUCESSO\033[1;33m • \033[0m"
echo ""
echo -e "\033[1;31m \033[1;33mCOMANDO PRINCIPAL: \033[1;32mpweb\033[0m"
echo -e "\033[1;33m MAIS INFORMAÇÕES \033[1;31m(\033[1;36mTELEGRAM\033[1;31m): \033[1;37m@nandoslayer\033[0m"
echo ""
echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mPWEB! \033[0m"; read
pweb
}

while true $x != "ok"
do
#
cd /bin/ppweb/ || exit
./verifatt.sh
cd  || exit;
service cron restart > /dev/null 2>&1
verp=$(cat /bin/ppweb/verpweb) &>/dev/null
verw=$(cat /bin/ppweb/verweb) &>/dev/null
verap=$(cat /bin/ppweb/attpweb) &>/dev/null
veraw=$(cat /bin/ppweb/attweb) &>/dev/null
echo "America/Sao_Paulo" > /etc/timezone
ln -fs /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime
dpkg-reconfigure --frontend noninteractive tzdata
clear
echo -e "\033[1;37m┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\033[0m"
echo -e "\033[1;37m┃                       \033[38;5;118mPAINEL \033[38;5;190mGESTOR\033[38;5;197m-\033[38;5;164mSS\033[38;5;203mH\033[38;5;197m\033[1;37m                      ┃\E[0m"
echo -e "\033[1;1;37m┃   \033[1;33m[\033[1;31m!\033[1;33m]       \033[1;31mINSTALADA \033[1;32mVERSÃO: $verp \033[1;31mDO PWEB              \033[1;33m[\033[1;31m!\033[1;33m]\033[0m   \033[1;1;37m┃"
[[ "$verp" = "$verap" ]]  && {
    sleep 0.2
} || {
echo -e "\033[1;1;37m┃   \033[5;33m[\033[1;31m!\033[1;33m]     \033[1;31mATUALIZAÇÃO \033[1;32mVERSÃO: $verap \033[1;31mPARA O PWEB          \033[1;33m[\033[1;31m!\033[1;33m]\033[0m   \033[1;1;37m┃"
}
echo -e "\033[1;1;37m┃   \033[1;33m[\033[1;31m!\033[1;33m]       \033[1;31mINSTALADA \033[1;32mVERSÃO: $verw \033[1;31mDO PAINELWEB         \033[1;33m[\033[1;31m!\033[1;33m]\033[0m   \033[1;1;37m┃"
[[ "$verw" = "$veraw" ]]  && {
    sleep 0.2
} || {
echo -e "\033[1;1;37m┃   \033[5;33m[\033[1;31m!\033[1;33m]     \033[1;31mATUALIZAÇÃO \033[1;32mVERSÃO: $veraw \033[1;31mPARA O PAINELWEB     \033[1;33m[\033[1;31m!\033[1;33m]\033[0m   \033[1;1;37m┃"
}
echo -e "\033[1;37m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
echo -e "\033[1;37m┃\033[38;5;82mSISTEMA              \033[1;37m| \033[38;5;82mMEMÓRIA RAM          \033[1;37m| \033[38;5;82mPROCESSADOR     \033[1;37m┃"
echo -e "┃\033[38;5;196mOS: \033[1;37m$_system   | \033[38;5;196mTOTAL:\033[1;37m$_ram     | \033[38;5;196mNUCLEO: \033[1;37m$_core\033[0m   \033[1;37m┃"
echo -e "┃\033[38;5;196mHORÁRIO: \033[1;37m$_hora    | \033[38;5;196mEM USO: \033[1;37m$_usor     | \033[38;5;196mEM USO: \033[1;37m$_usop\033[0m   \033[1;37m┃"
echo -e "┃\033[38;5;150mFIREWALL: $firew      \033[1;37m| \033[38;5;150mBOT PWEB: $botp      \033[1;37m| \033[38;5;150mAUTO EXE: $autm\033[0m \033[1;37m┃"
echo -e "\033[1;37m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┫\033[0m"
echo -e "┃\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mATUALIZAR/MUDAR O MODO DO PAINELWEB GESTOR-SSH \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m    \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mALTERAR NOME DA LOGO \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                              \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mRESTAURAR BANCO DE DADOS \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                          \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mFIREWALL ORACLE/AWS/AZR \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                           \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mBAIXAR ÚLTIMA VERSÃO DO PWEB \033[1;32m>\033[1;33m>\033[1;31m>\033[0m                       \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;33mALTERAR A SENHA ROOT \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                              \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;33mGERENCIAR BOT PWEB \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                                \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m08\033[1;31m] \033[1;37m• \033[1;33mSPEED TEST \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                                        \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m09\033[1;31m] \033[1;37m• \033[1;33mAUTO EXECUÇÃO DO PWEB \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                             \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m10\033[1;31m] \033[1;37m• \033[1;33mREINICIAR VPS \033[1;32m>\033[1;33m>\033[1;31m>\033[0m \033[0m                                     \033[1;37m┃"
echo -e "┃\033[1;31m[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33mSAIR \033[1;32m<\033[1;33m<\033[1;31m<\033[0m \033[0m                                              \033[1;37m┃"
echo -e "\033[1;37m┣━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛\033[0m"
echo -ne "\033[1;37m┗━┫\033[1;32mO QUE DESEJA FAZER \033[1;31m? "; read -r x

case "$x" in 
   1 | 01)
   att_pweb
   exit;
   ;;
   2 | 02)
   painel_empresa
   exit;
   ;;
   3 | 03)
   painel_rest
   exit;
   ;;
   4 | 04)
   oracl
   exit;
   ;;
   5 | 05)
   fun_atpweb
   exit;
   ;;
   6 | 06)
   senha_root
   exit;
   ;;
    7 | 07)
   bot_telegram
   exit;
   ;;
    8 | 08)
   clear
   velocity
   echo ""
   echo -ne "\n\033[1;31mENTER \033[1;33mpara retornar ao \033[1;32mPWEB! \033[0m"; read
   pweb
   exit;
   ;;
    9 | 09)
   autoexec
   exit;
   ;;
   10 | 010)
   echo ""
   echo -ne "\033[1;36mDESEJA REALMENTE REINICIAR [S/N]: \033[1;37m"; read x
   [[ $x = @(n|N) ]] && pweb
   time_reboot "10"
   exit;
   ;;
   0 | 00)
   echo -e "\033[1;31mSaindo...\033[0m"
   sleep 2
   clear
   exit;
   ;;
   *)
   echo -e "\n\033[1;31mOpção inválida !\033[0m"
   sleep 2
esac
done
}